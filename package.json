{
  "scripts": {
    "dev": "serverless offline start",
    "performance:test": "ts-node scripts/performance-test.ts",
    "performance:test:load": "ts-node scripts/performance-test.ts --connections 500 --duration 60",
    "performance:alerts:setup": "ts-node src/infrastructure/monitoring/performance-alerts.ts",
    "performance:report": "ts-node scripts/performance-test.ts --report-only",
    "infra:lb:setup": "ts-node src/infrastructure/load-balancer/alb-config.ts",
    "infra:dashboard:create": "ts-node src/infrastructure/monitoring/performance-dashboard.ts",
    "infra:setup:all": "npm run infra:lb:setup && npm run infra:dashboard:create && npm run performance:alerts:setup",
    "performance:analyze": "ts-node src/infrastructure/monitoring/performance-trend.ts",
    "performance:analyze:weekly": "ts-node src/infrastructure/monitoring/performance-trend.ts --days 7",
    "performance:analyze:monthly": "ts-node src/infrastructure/monitoring/performance-trend.ts --days 30",
    "infra:scaling:setup": "ts-node src/infrastructure/scaling/auto-scaling.ts",
    "infra:metrics:init": "ts-node src/infrastructure/monitoring/custom-metrics.ts",
    "metrics:aggregate": "ts-node src/infrastructure/monitoring/metrics-aggregator.ts",
    "metrics:aggregate:daily": "ts-node src/infrastructure/monitoring/metrics-aggregator.ts --period daily",
    "dashboard:health:create": "ts-node src/infrastructure/monitoring/health-dashboard.ts",
    "dashboard:health:update": "ts-node src/infrastructure/monitoring/health-dashboard.ts --update",
    "infra:cleanup": "ts-node src/infrastructure/cleanup/cleanup-manager.ts",
    "infra:cleanup:report": "ts-node src/infrastructure/cleanup/cleanup-manager.ts --report",
    "infra:inventory": "ts-node src/infrastructure/inventory/inventory-manager.ts",
    "infra:inventory:report": "ts-node src/infrastructure/inventory/inventory-manager.ts --report",
    "infra:track:changes": "ts-node src/infrastructure/tracking/change-tracker.ts",
    "infra:track:report": "ts-node src/infrastructure/tracking/change-tracker.ts --report",
    "capacity:plan": "ts-node src/infrastructure/capacity/capacity-planner.ts",
    "capacity:forecast": "ts-node src/infrastructure/capacity/capacity-planner.ts --forecast",
    "analytics:usage": "ts-node src/infrastructure/analytics/usage-analyzer.ts",
    "analytics:report": "ts-node src/infrastructure/analytics/usage-analyzer.ts --report",
    "cost:allocate": "ts-node src/infrastructure/cost/cost-allocator.ts",
    "cost:allocate:report": "ts-node src/infrastructure/cost/cost-allocator.ts --report",
    "backup:strategy:setup": "ts-node src/infrastructure/backup/backup-strategy.ts",
    "backup:strategy:verify": "ts-node src/infrastructure/backup/backup-strategy.ts --verify",
    "security:scan": "ts-node src/infrastructure/security/security-scanner.ts",
    "security:scan:report": "ts-node src/infrastructure/security/security-scanner.ts --report",
    "security:scan:deps": "npm audit && snyk test",
    "security:scan:code": "ts-node src/infrastructure/security/code-scanner.ts",
    "security:scan:secrets": "ts-node src/infrastructure/security/secrets-scanner.ts",
    "security:scan:docker": "ts-node src/infrastructure/security/container-scanner.ts",
    "security:compliance": "ts-node src/infrastructure/security/compliance-checker.ts",
    "security:pentest": "ts-node src/infrastructure/security/penetration-test.ts",
    "security:audit:full": "npm run security:scan && npm run security:scan:deps && npm run security:scan:code && npm run security:scan:secrets",
    "security:report:generate": "ts-node src/infrastructure/security/report-generator.ts",
    "security:monitor": "ts-node src/infrastructure/security/security-monitor.ts",
    "security:fix": "ts-node src/infrastructure/security/auto-remediation.ts",
    "security:baseline": "ts-node src/infrastructure/security/security-baseline.ts",
    "test:coverage": "jest --coverage --coverageReporters=lcov --coverageReporters=json --testResultsProcessor=jest-sonar-reporter",
    "test:security": "jest --config jest.security.config.js",
    "test:integration:security": "jest --config jest.security.integration.config.js",
    "lint:security": "eslint 'src/infrastructure/security/**/*.ts'",
    "admin:lint": "eslint 'src/admin/**/*.ts'"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "dynamodb-local": "^0.0.35",
    "jest": "^29.7.0",
    "serverless": "^3.40.0",
    "serverless-offline": "^12.0.4",
    "serverless-plugin-typescript": "^2.1.5"
  }
}
